#if !canImport(ObjectiveC)
import XCTest

extension AdjacencySchemesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AdjacencySchemesTests = [
        ("testExternalToExternalNodes", testExternalToExternalNodes),
        ("testExternalToInternalNodes", testExternalToInternalNodes),
        ("testSourceToDown", testSourceToDown),
    ]
}

extension InvertingSpellingNetworkTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InvertingSpellingNetworkTests = [
        ("testConsistentBasicExample", testConsistentBasicExample),
        ("testCycleCheckFSharpASharpGFlatBFlat", testCycleCheckFSharpASharpGFlatBFlat),
        ("testCycleCheckFSharpASharpGFlatBFlatSubGraphs", testCycleCheckFSharpASharpGFlatBFlatSubGraphs),
        ("testCycleCheckFSharpASharpGFlatBFlatSubGraphsAfterStronglyConnectedComponentsClumped", testCycleCheckFSharpASharpGFlatBFlatSubGraphsAfterStronglyConnectedComponentsClumped),
        ("testDependenciesFSharpASharp", testDependenciesFSharpASharp),
        ("testGroupBuilderSimple", testGroupBuilderSimple),
        ("testGroupBuilderSimple2", testGroupBuilderSimple2),
        ("testGroupBuilderThreeGroupsMoreComplicated", testGroupBuilderThreeGroupsMoreComplicated),
        ("testGroupBuilderThreeGroupsMoreComplicatedPartitionSyntax", testGroupBuilderThreeGroupsMoreComplicatedPartitionSyntax),
        ("testGroupBuilderTwoGroups", testGroupBuilderTwoGroups),
        ("testGroupBuilderTwoGroupsMoreComplicated", testGroupBuilderTwoGroupsMoreComplicated),
        ("testInvertingSpellingNetworkAdjacenciesFSharpASharp", testInvertingSpellingNetworkAdjacenciesFSharpASharp),
        ("testInvertingSpellingNetworkEdgesPitchClass11", testInvertingSpellingNetworkEdgesPitchClass11),
        ("testInvertingSpellingNetworkPitchClass0", testInvertingSpellingNetworkPitchClass0),
        ("testInvertingSpellingNetworkPitchClass1", testInvertingSpellingNetworkPitchClass1),
        ("testInvertingSpellingNetworkPitchClass10", testInvertingSpellingNetworkPitchClass10),
        ("testInvertingSpellingNetworkPitchClass11", testInvertingSpellingNetworkPitchClass11),
        ("testInvertingSpellingNetworkPitchClass2", testInvertingSpellingNetworkPitchClass2),
        ("testInvertingSpellingNetworkPitchClass3", testInvertingSpellingNetworkPitchClass3),
        ("testInvertingSpellingNetworkPitchClass4", testInvertingSpellingNetworkPitchClass4),
        ("testInvertingSpellingNetworkPitchClass5", testInvertingSpellingNetworkPitchClass5),
        ("testInvertingSpellingNetworkPitchClass6", testInvertingSpellingNetworkPitchClass6),
        ("testInvertingSpellingNetworkPitchClass7", testInvertingSpellingNetworkPitchClass7),
        ("testInvertingSpellingNetworkPitchClass8", testInvertingSpellingNetworkPitchClass8),
        ("testInvertingSpellingNetworkPitchClass9", testInvertingSpellingNetworkPitchClass9),
        ("testLargeSetOfDyadsWithoutCycles", testLargeSetOfDyadsWithoutCycles),
        ("testMajorThirds", testMajorThirds),
        ("testMinorThirds", testMinorThirds),
        ("testPerfectFourths", testPerfectFourths),
        ("testSemitones", testSemitones),
        ("testTones", testTones),
        ("testWeightsDerivationWithSimpleCycle", testWeightsDerivationWithSimpleCycle),
        ("testWeightsFSharpASharp", testWeightsFSharpASharp),
    ]
}

extension PitchSpellingNetworkTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PitchSpellingNetworkTests = [
        ("testDyadSpellingCSharpDSharp", testDyadSpellingCSharpDSharp),
        ("testDyadSpellingDFlatEFlat", testDyadSpellingDFlatEFlat),
        ("testDyadSpellingEFlatG", testDyadSpellingEFlatG),
        ("testTriadSpellingEFlatBFlatD", testTriadSpellingEFlatBFlatD),
        ("testTrivialPitchSpellingNetwork", testTrivialPitchSpellingNetwork),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AdjacencySchemesTests.__allTests__AdjacencySchemesTests),
        testCase(InvertingSpellingNetworkTests.__allTests__InvertingSpellingNetworkTests),
        testCase(PitchSpellingNetworkTests.__allTests__PitchSpellingNetworkTests),
    ]
}
#endif
